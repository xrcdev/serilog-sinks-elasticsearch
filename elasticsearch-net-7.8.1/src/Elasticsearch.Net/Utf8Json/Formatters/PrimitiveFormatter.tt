<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#
    var types = new[]
    {
        typeof(sbyte),
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(byte), 
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
        typeof(Single),
        typeof(Double),
        typeof(bool), 
    };
#>
#region Utf8Json License https://github.com/neuecc/Utf8Json/blob/master/LICENSE
// MIT License
// 
// Copyright (c) 2017 Yoshifumi Kawai
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

using System;

namespace Elasticsearch.Net
{
<# foreach(var t in types) {  #>
    internal sealed class <#= t.Name #>Formatter : IJsonFormatter<<#= t.Name #>>, IObjectPropertyNameFormatter<<#= t.Name #>>
    {
        public static readonly <#= t.Name #>Formatter Default = new <#= t.Name #>Formatter();

        public void Serialize(ref JsonWriter writer, <#= t.Name #> value, IJsonFormatterResolver formatterResolver)
        {
            writer.Write<#= t.Name #>(value);
        }

        public <#= t.Name #> Deserialize(ref JsonReader reader, IJsonFormatterResolver formatterResolver)
        {
            return reader.Read<#= t.Name #>();
        }

        public void SerializeToPropertyName(ref JsonWriter writer, <#= t.Name #> value, IJsonFormatterResolver formatterResolver)
        {
            writer.WriteQuotation();
            writer.Write<#= t.Name #>(value);
            writer.WriteQuotation();
        }

        public <#= t.Name #> DeserializeFromPropertyName(ref JsonReader reader, IJsonFormatterResolver formatterResolver)
        {
            var key = reader.ReadStringSegmentRaw();
            int _;
            return NumberConverter.Read<#= t.Name #>(key.Array, key.Offset, out _);
        }
    }

    internal sealed class Nullable<#= t.Name #>Formatter : IJsonFormatter<<#= t.Name #>?>, IObjectPropertyNameFormatter<<#= t.Name #>?>
    {
        public static readonly Nullable<#= t.Name #>Formatter Default = new Nullable<#= t.Name #>Formatter();

        public void Serialize(ref JsonWriter writer, <#= t.Name #>? value, IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
            }
            else
            {
                writer.Write<#= t.Name #>(value.Value);
            }
        }

        public <#= t.Name #>? Deserialize(ref JsonReader reader, IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            else
            {
                return reader.Read<#= t.Name #>();
            }
        }

        public void SerializeToPropertyName(ref JsonWriter writer, <#= t.Name #>? value, IJsonFormatterResolver formatterResolver)
        {
            if (value == null) { writer.WriteNull(); return; }

            writer.WriteQuotation();
            writer.Write<#= t.Name #>(value.Value);
            writer.WriteQuotation();
        }

        public <#= t.Name #>? DeserializeFromPropertyName(ref JsonReader reader, IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull()) return null;

            var key = reader.ReadStringSegmentRaw();
            int _;
            return NumberConverter.Read<#= t.Name #>(key.Array, key.Offset, out _);
        }
    }

<# if(t.Name != "Byte") { #>
    internal sealed class <#= t.Name #>ArrayFormatter : IJsonFormatter<<#= t.Name #>[]>
    {
        public static readonly <#= t.Name #>ArrayFormatter Default = new <#= t.Name #>ArrayFormatter();

        public void Serialize(ref JsonWriter writer, <#= t.Name #>[] value, IJsonFormatterResolver formatterResolver)
        {
            if (value == null)
            {
                writer.WriteNull();
            }
            else
            {
                writer.WriteBeginArray();

                if (value.Length != 0)
                {
                    writer.Write<#= t.Name #>(value[0]);
                }
                for (int i = 1; i < value.Length; i++)
                {
                    writer.WriteValueSeparator();
                    writer.Write<#= t.Name #>(value[i]);
                }

                writer.WriteEndArray();
            }
        }

        public <#= t.Name #>[] Deserialize(ref JsonReader reader, IJsonFormatterResolver formatterResolver)
        {
            if (reader.ReadIsNull())
            {
                return null;
            }
            else
            {
                reader.ReadIsBeginArrayWithVerify();
                var array = new <#= t.Name #>[4];
                var count = 0;
                while (!reader.ReadIsEndArrayWithSkipValueSeparator(ref count))
                {
                    if (array.Length < count)
                    {
                        Array.Resize(ref array, count * 2);
                    }
                    array[count - 1] = reader.Read<#= t.Name #>();
                }

                Array.Resize(ref array, count);
                return array;
            }
        }
    }
<# } #>

<# } #>
}