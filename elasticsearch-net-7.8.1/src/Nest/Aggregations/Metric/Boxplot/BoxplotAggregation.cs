// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information

ï»¿using System.Runtime.Serialization;
using Elasticsearch.Net.Utf8Json;

namespace Nest
{
	/// <summary>
	/// A metrics aggregation that computes boxplot of numeric values extracted from the aggregated documents.
	/// These values can be generated by a provided script or extracted from specific numeric or histogram fields in the documents.
	/// <para />
	/// Available in Elasticsearch 7.7.0+ with at least basic license level
	/// </summary>
	[InterfaceDataContract]
	[ReadAs(typeof(BoxplotAggregation))]
	public interface IBoxplotAggregation : IMetricAggregation
	{
		/// <summary>
		/// Balances memory utilization with estimation accuracy.
		/// Increasing compression, increases the accuracy of percentiles at the cost
		/// of more memory. Larger compression values also make the algorithm slower since the underlying tree data structure grows in size,
		/// resulting in more expensive operations.
		/// </summary>
		[DataMember(Name = "compression")]
		double? Compression { get; set; }
	}

	/// <inheritdoc cref="IBoxplotAggregation"/>
	public class BoxplotAggregation : MetricAggregationBase, IBoxplotAggregation
	{
		internal BoxplotAggregation() { }

		public BoxplotAggregation(string name, Field field) : base(name, field) { }

		internal override void WrapInContainer(AggregationContainer c) => c.Boxplot = this;

		/// <inheritdoc />
		public double? Compression { get; set; }
	}

	/// <inheritdoc cref="IBoxplotAggregation"/>
	public class BoxplotAggregationDescriptor<T>
		: MetricAggregationDescriptorBase<BoxplotAggregationDescriptor<T>, IBoxplotAggregation, T>
			, IBoxplotAggregation
		where T : class
	{
		double? IBoxplotAggregation.Compression { get; set; }

		/// <inheritdoc cref="IBoxplotAggregation.Compression"/>
		public BoxplotAggregationDescriptor<T> Compression(double? compression) =>
			Assign(compression, (a, v) => a.Compression = v);
	}
}
