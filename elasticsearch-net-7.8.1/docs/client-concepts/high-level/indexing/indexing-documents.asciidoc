:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/7.x

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/7.x/src/Tests/Tests/ClientConcepts/HighLevel/Indexing/IndexingDocuments.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[indexing-documents]]
=== Indexing

NEST has a number of ways to index documents.

==== Single documents

A single document can be indexed at a time, either synchronously or asynchronously.
These methods use the `IndexDocument` methods, which is a simple way to index single documents.

[source,csharp]
----
var person = new Person
{
    Id = 1,
    FirstName = "Martijn",
    LastName = "Laarman"
};

var indexResponse = client.IndexDocument(person); <1>
if (!indexResponse.IsValid)
{
    // If the request isn't valid, we can take action here
}

var indexResponseAsync = await client.IndexDocumentAsync(person); <2>
----
<1> synchronous method that returns an IIndexResponse
<2> asynchronous method that returns a Task<IIndexResponse> that can be awaited

==== Single documents with parameters

If you need to set additional parameters when indexing you can use the fluent or object initializer syntax.
This will allow you finer control over the indexing of single documents.

[source,csharp]
----
var person = new Person
{
    Id = 1,
    FirstName = "Martijn",
    LastName = "Laarman"
};

client.Index(person, i => i.Index("people")); <1>

client.Index(new IndexRequest<Person>(person, "people")); <2>
----
<1> fluent syntax
<2> object initializer syntax

==== Multiple documents with `IndexMany`

Multiple documents can be indexed using the `IndexMany` and `IndexManyAsync` methods, again either synchronously or asynchronously, respectively.
These methods are specific to the NEST client and wrap calls to the `_bulk` endpoint, providing a convenient shortcut to indexing
multiple documents.

Please note, these methods index all documents in a single HTTP request, so for very large document collections it is not a recommended approach

* consider using the `BulkAllObservable` helper instead.

[source,csharp]
----
var people = new []
{
    new Person
    {
        Id = 1,
        FirstName = "Martijn",
        LastName = "Laarman"
    },
    new Person
    {
        Id = 2,
        FirstName = "Stuart",
        LastName = "Cam"
    },
    new Person
    {
        Id = 3,
        FirstName = "Russ",
        LastName = "Cam"
    }
};

var indexManyResponse = client.IndexMany(people); <1>

if (indexManyResponse.Errors) <2>
{
    foreach (var itemWithError in indexManyResponse.ItemsWithErrors) <3>
    {
        Console.WriteLine("Failed to index document {0}: {1}", itemWithError.Id, itemWithError.Error);
    }
}

// Alternatively, documents can be indexed asynchronously
var indexManyAsyncResponse = await client.IndexManyAsync(people); <4>
----
<1> synchronous method that returns an IBulkResponse
<2> the response can be inspected to see if any of the bulk operations resulted in an error
<3> If there are errors, they can be enumerated and inspected
<4> asynchronous method that returns a Task<IBulkResponse> that can be awaited

==== Multiple documents with bulk

If you require finer grained control over indexing many documents you can use the `Bulk` and `BulkAsync` methods and use the descriptors to
customise the bulk calls.

As with the `IndexMany` methods above, documents are sent to the `_bulk` endpoint in a single HTTP request.
This does mean that consideration will need to be given to the overall size of the HTTP request. For indexing large numbers
of documents it may be sensible to perform multiple separate `Bulk` calls.

[source,csharp]
----
var bulkIndexResponse = client.Bulk(b => b
    .Index("people")
    .IndexMany(people)); <1>

// Alternatively, documents can be indexed asynchronously similar to IndexManyAsync
var asyncBulkIndexResponse = await client.BulkAsync(b => b
    .Index("people")
    .IndexMany(people)); <2>
----
<1> synchronous method that returns an IBulkResponse, the same as IndexMany and can be inspected in the same way for errors
<2> asynchronous method that returns a Task<IBulkResponse> that can be awaited

==== Multiple documents with `BulkAllObservable` helper

Using the `BulkAllObservable` helper allows you to focus on the overall objective of indexing, without having to
concern yourself with retry, backoff or chunking mechanics.
Multiple documents can be indexed using the `BulkAll` method and `Wait()` extension method.

This helper exposes functionality to automatically retry / backoff in the event of an indexing failure,
and to control the number of documents indexed in a single HTTP request. In the example below each request will contain 1000 documents,
chunked from the original input. In the event of a large number of documents this could result in many HTTP requests, each containing
1000 documents (the last request may contain less, depending on the total number).

The helper will also lazily enumerate an `IEnumerable<T>` collection, allowing you to index a large number of documents easily.

[source,csharp]
----
var bulkAllObservable = client.BulkAll(people, b => b
    .Index("people")
    .BackOffTime("30s") <1>
    .BackOffRetries(2) <2>
    .RefreshOnCompleted()
    .MaxDegreeOfParallelism(Environment.ProcessorCount)
    .Size(1000) <3>
)
.Wait(TimeSpan.FromMinutes(15), next => <4>
{
    // do something e.g. write number of pages to console
});
----
<1> how long to wait between retries
<2> how many retries are attempted if a failure occurs
<3> items per bulk request
<4> perform the indexing and wait up to 15 minutes, whilst the BulkAll calls are asynchronous this is a blocking operation

==== Advanced bulk indexing

The BulkAllObservable helper exposes a number of advanced features.

1. `BufferToBulk` allows for the customisation of individual operations within the bulk request before it is dispatched to the server.

2. `RetryDocumentPredicate` enables fine control on deciding if a document that failed to be indexed should be retried.

3. `DroppedDocumentCallback` in the event a document is not indexed, even after retrying, this delegate is called.

[source,csharp]
----
client.BulkAll(people, b => b
      .BufferToBulk((descriptor, list) => <1>
      {
          foreach (var item in list)
          {
              descriptor.Index<Person>(bi => bi
                  .Index(item.Id % 2 == 0 ? "even-index" : "odd-index") <2>
                  .Document(item)
              );
          }
      })
      .RetryDocumentPredicate((item, person) => <3>
      {
          return item.Error.Index == "even-index" && person.FirstName == "Martijn";
      })
      .DroppedDocumentCallback((item, person) => <4>
      {
          Console.WriteLine($"Unable to index: {item} {person}");
      }));
----
<1> customise the individual operations in the bulk request before it is dispatched
<2> Index each document into either even-index or odd-index
<3> decide if a document should be retried in the event of a failure
<4> if a document cannot be indexed this delegate is called

