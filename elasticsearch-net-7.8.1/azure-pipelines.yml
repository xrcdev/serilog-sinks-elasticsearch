trigger:
  batch: true
  branches:
    include:
    - master
    - "*.x"

pr:
  autoCancel: true
  branches:
    exclude:
    - "backport-*" 

jobs:
- job: StaleDocs
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UseDotNet@2
    inputs:
       version: '3.0.100'
  - script: ./build.sh documentation
    displayName: 'Generate Documentation'
  - script: |
      if [ -n "$(git status --porcelain)" ]; then echo Error: changes found after running documentation; git diff; git status; exit 1; fi
    displayName: 'Ensure no uncommitted docs'
- job: LinuxUnitTests
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UseDotNet@2
    inputs:
        version: '3.0.100'
  - script: ./build.sh test-one
    displayName: 'build and unit test'
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
        testRunner: VSTest
        testResultsFiles: 'tests/**/*.trx'
        testRunTitle: Linux Unit Tests
  # Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
  # First install the tool on the machine, then run it
  - script: |
      dotnet tool install -g dotnet-reportgenerator-globaltool
      reportgenerator -reports:$(Build.SourcesDirectory)/tests/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage "-reporttypes:HtmlInline_AzurePipelines;Cobertura"
    displayName: 'CodeCov Create'

  # Publish the code coverage result (summary and web site)
  # The summary allows to view the coverage percentage in the summary tab
  # The web site allows to view which lines are covered directly in Azure Pipeline
  - task: PublishCodeCoverageResults@1
    displayName: 'CodeCov Publish'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

- job: WindowsCanaryTests
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '3.0.100'
  - script: build.bat canary
    displayName: 'build and unit test'
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: 'tests/**/*.trx'
      testRunTitle: Windows Unit Tests
      
- job: WindowsIntegrationTests
  dependsOn: WindowsCanaryTests
  pool:
      vmImage: 'vs2017-win2016'
  strategy:
    maxParallel: 5
    matrix:
      es7:
        esVersion: '7.0.0'
      es71:
        esVersion: '7.1.0'
      es72:
        esVersion: '7.2.0'
      es73:
        esVersion: '7.3.0'
      es74:
        esVersion: '7.4.0'
      es75:
        esVersion: '7.5.0'
      es76:
        esVersion: '7.6.0'
      es77:
        esVersion: '7.7.0'
      es78:
        esVersion: '7.8.0-SNAPSHOT'
      latest7:
        esVersion: 'latest-7'
  steps:
      - task: UseDotNet@2
        inputs:
            version: '3.0.100'
      - script: 'build.bat integrate-one $(esVersion) "readonly,writable,bool,xpack"'
        displayName: '$(esVersion) windows integration tests'
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
            testRunner: VSTest
            testResultsFiles: 'tests/Tests/**/*.trx'
            testRunTitle: '$(esVersion) Windows Integration Tests'
            
- job: LinuxIntegrationTests
  dependsOn: LinuxUnitTests
  pool:
      vmImage: 'ubuntu-16.04'
  strategy:
      maxParallel: 5
      matrix:
        es7:
          esVersion: '7.0.0'
        es71:
          esVersion: '7.1.0'
        es72:
          esVersion: '7.2.0'
        es73:
          esVersion: '7.3.0'
        es74:
          esVersion: '7.4.0'
        es75:
          esVersion: '7.5.0'
        es76:
          esVersion: '7.6.0'
        es77:
          esVersion: '7.7.0'
        es78:
          esVersion: '7.8.0-SNAPSHOT'
        latest7:
          esVersion: 'latest-7'
  steps:
      - task: UseDotNet@2
        inputs:
            version: '3.0.100'
      - script: './build.sh integrate-one $(esVersion) "readonly,writable"'
        displayName: '$(esVersion) linux integration tests'
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
            testRunner: VSTest
            testResultsFiles: 'tests/Tests/**/*.trx'
            testRunTitle: '$(esVersion) Linux Integration Tests'
